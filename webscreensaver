#!/usr/bin/env python2.7

# WebScreensaver - Make any web page a screensaver

import os
import os.path
import sys
import random
import signal

import gobject
import gtk
import webkit

class WebScreensaver(object):
	'''
	A simple wrapper for WebKit which works as an XScreensaver Hack
	'''
	
	def __init__(self, tags='anime,trippy,bill nye,aeiou', window_id=None, scripts=None):
		self.window_id = window_id
		self.scripts = scripts
		self.tags = tags
		if self.tags:
			self.tags = [i.strip() for i in self.tags.split(',')]
		else:
			self.tags = []
		
		self.load_tags()
		self.w = 640
		self.h = 480

	def load_tags(self):
		'''Load tags from tagfile'''
                file = '~/.tags'
		file = os.path.expanduser(file)
		if not os.path.exists(file):
			print 'No tags file... skipping tag load'
			return

		with open(file) as f:
			tags = [i.strip() for i in f]

		self.tags = list(set(tags) | set(self.tags)) 

	def setup_window(self):
		'''Perform some magic (if needed) to set up a Gtk window'''
		win = None

		if self.window_id:
			win = gtk.Window(gtk.WINDOW_POPUP)

			# There is a degree of mystery to this process...
			self.gdk_win = gtk.gdk.window_foreign_new(self.window_id)

			# We show the window so we get a Gdk Window,
			# then we we can reparent it...
			win.show()
			win.get_window().reparent(self.gdk_win, 0, 0)

			x, y, w, h, _ = self.gdk_win.get_geometry()
			
			# Make us cover our parent window
			win.move(0, 0)
			win.set_default_size(w, h)
			win.set_size_request(w, h)

			self.w, self.h = w, h
		else:
			win = gtk.Window()
			win.set_default_size(self.w, self.h)

		self.win = win

	def setup_browser(self):
		'''Sets up WebKit in our window'''
		browser = webkit.WebView()

		# Try to enable webgl
		try:
			settings = browser.get_settings()
			settings.set_property('enable-webgl', True)
		except:
			pass

		# Take a stab at guessing whether we are running in the
		# XScreensaver preview window...
		if self.w < 320 and self.h < 240:
			 browser.set_full_content_zoom(True)
			 browser.set_zoom_level(0.4)

		browser.set_size_request(self.w, self.h)

		browser.connect('onload-event', self.handle_on_load)

		self.browser = browser

	def handle_on_load(self, view, frame, user_data=None):
		'''
		Handler for browser page load events.
		This will be executed for every frame within the browser.
		'''

		if not self.scripts:
			return

		for script in self.scripts:
			print "Executing script: ", script
			self.browser.execute_script(script)

	def setup_layout(self):
		'''Make sure the browser can expand without affecting the window'''
		sw = gtk.Layout()
		sw.put(self.browser, 0, 0)
		self.win.add(sw)

	def setup(self):
		'''Do all the things!'''
		self.setup_window()
		self.setup_browser()
		self.setup_layout()

		self.win.connect('destroy', gtk.main_quit)
		self.win.connect('delete-event', gtk.main_quit)

		signal.signal(signal.SIGINT, signal.SIG_DFL)
		signal.signal(signal.SIGTERM, gtk.main_quit)

		self.win.show_all()
		
		#select tag
		tag = random.choice(self.tags)
		self.browser.open("https://tumblr.com/tv/%s" % tag)

	@classmethod
	def determine_window_id(cls, win_id=None):
		'''Try and get an XID to use as our parent window'''
		if not win_id:
			win_id = os.getenv('XSCREENSAVER_WINDOW')

		if win_id:
			win_id = long(int(win_id, 16))

		return win_id

class UserScripts(object):
	'''
	Some quick and dirty scripts to help us remove cruft from web pages
	'''
	
	@classmethod
	def remove_ids(cls, _id):
		script = '''
			(function() {
				var el = document.getElementById("%s");
				if (el) {
					el.parentNode.removeChild(el);
				}
			})();
		'''
		return script % _id


	@classmethod
	def remove_tags(cls, tag):
		script = '''
			(function() {
				var tags = document.getElementsByTagName("%s");
				if (tags && tags.length > 0) {
					for (var i = 0; i < tags.length; i++) {
						var el = tags[i];
						el.parentNode.removeChild(el);
					}
				}
			})();
		'''
		return script % tag

class WebHacks(object):
	'''
	A collection of neat HTML5/WebGL demos
	'''
	
	class Hack(object):
		__slots__ = "name url scripts".split(" ")

		def __init__(self, name, url=None, scripts=None):
			self.name, self.url, self.scripts = name, url, scripts

	hacks = (
		Hack('starfield',
			url='http://www.chiptune.com/starfield/starfield.html',
			scripts=[ UserScripts.remove_tags("iframe") ]
		),
		Hack('reactive-ball',
			url='http://lab.aerotwist.com/webgl/reactive-ball/',
			scripts=[ UserScripts.remove_ids("msg") ]
		),
		Hack('hatching-glow',
			url='http://www.ro.me/tech/demos/1/index.html',
			scripts=[ UserScripts.remove_ids("info") ]
		),
		Hack('marbles',
			url='http://experiments.joshua-perez.com/marbles/',
			scripts=[ UserScripts.remove_ids("guidat") ]
		),
		Hack('shadow-map',
			url='http://alteredqualia.com/three/examples/webgl_shadowmap.html',
			scripts=[ UserScripts.remove_ids("info") ]
		),
		Hack('birds',
			url='http://mrdoob.github.com/three.js/examples/canvas_geometry_birds.html',
			scripts=[ UserScripts.remove_ids("info"), UserScripts.remove_ids("container") ]
		),

		Hack('flying-pigs',		url='http://jterrace.github.com/pigsflying/'),

		Hack('gimme-shiny',		url='http://gimmeshiny.com/?seconds=30'),
		Hack('cell-shader',		url='http://www.ro.me/tech/demos/6/index.html'),
		Hack('kinect',			url='http://mrdoob.com/lab/javascript/webgl/kinect/'),
		Hack('conductor',		url='http://www.mta.me/'),
		Hack('dashboard-clock', url='http://daneden.me/dashboard/')
	)

	@classmethod
	def print_list(cls):
		for hack in cls.hacks:
			print "%15s\t%s" % (hack.name, hack.url)

	@classmethod
	def determine_screensaver(cls, name=None):
		for hack in cls.hacks:
			if hack.name == name:
				return hack		

		# I'm feeling lucky :-)
		return random.choice(cls.hacks)

if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser(description='WebScreensaver: Run a web page as your screensaver')
	parser.add_argument('-window-id', help='XID of Window to draw on')
	parser.add_argument('-tags', help='A comma-separated list of tags to use on tumblr')
	args = parser.parse_args()

	# I believe that WebKit likes threads
	gobject.threads_init()

	tags, scripts = None, None

	if args.tags:
		tags = args.tags

	saver = WebScreensaver(
		window_id=WebScreensaver.determine_window_id(args.window_id),
	)
	saver.setup()

	gtk.main()
